/*
    DISPLAY: FLEX               Permite que dos elementos TIPO BLOCK, se ubiquen uno al lado del
    otro. Para esto, los dos elementos se deben encontrar en un contenedor PADRE, que
    es sobre el cual se aplicara la propiedad FLEX

    ALIGN-ITEMS: CENTER         Permite que los elementos contenidos en el elemento padre
    se alinen tanto vertical como horizontalmente (Se alinean HORIZONTALMENTE dependiendo del
    tamaño del contenedor PADRE)

    JUSTIFY-CONTENT: SPACE-BETWEEN  Permite que los elementos contenidos por el padre, se alinean de
    una determinada forma a lo largo de la pantalla. Evitando usar margin, float, etc.
*/

.headerPrincipal .container{
    display: flex;
    align-items: center;
    justify-content: space-between;
}
/*
    DISPLAY: FLEX               Permite que los elementos internos que actualmente se comportan como
    elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro
    horizontalmente
*/
.headerPrincipal-nav{
    display: flex;
}

/*
    DISPLAY: FLEX               Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro horizontalmente

    JUSTIFY-CONTENT: SPACE-BETWEEN  Permite que los elementos que ya tienen una propiedad TIPO FLEX, pasen a ordenarse de determinada forma HORIZONTALMENTE
*/

.rodapePrincipal-patrocinadores .container{
    display: flex;
    justify-content: space-between;
}

/*
    DISPLAY: FLEX               Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otrohorizontalmente

    ALIGN-ITEMS: CENTER         Permite que los elementos contenidos en el elemento padre se alinen tanto vertical como horizontalmente (Se alinean HORIZONTALMENTE dependiendo del tamaño del contenedor PADRE)

    WIDTH: 70%                  Se aplica un ancho determinado para el contenedor que alamacena los patrocinadores dado que su contenedor PADRE, NO contiene el 100% del ancho de la pantalla. Esto es porque comparte ese 100% con el contenedor PADRE que hace referencia al formulario

    JUSTIFY-CONTENT: SPACE AROUND  ermite que los elementos que ya tienen una propiedad TIPO FLEX, pasen a ordenarse de determinada forma HORIZONTALMENTE. La forma en que se organizan, depende del tamaño del contenedor PADRE, que en este caso es del 70%

    MARGIN: RIGHT           Se le aplica un margen del 5% entre el contenedor de los patrocinadores y el contenedor del formulario
*/
.rodapePrincipal-patrocinadores-list{
    display: flex;
    align-items: center;
    width: 70%;
    justify-content: space-around;
    margin-right: 5%;

}
/*
    WIDTH: 25%              Se le aplica un ancho determinado al contenedor del elemento PADRE del formulario. De esta forma se hace referencia al 100% de la pantalla
*/
.rodapePrincipal-contatoForm{
    width: 25%;
}
/*
    DISPLAY: FLEX           Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro horizontalmente
*/
.rodapePrincipal-contatoForm-fieldset{
    display: flex;
}
/*
    DISPLAY: FLEX           Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro horizontalmente

    FLEX-DIRECTION: COLUMN  Por defecto, al aplicar DISPLAY: FLEX, los elementos toman la propiedad row que hace referecnai al FLEX-DIRECTION: ROW, es decir, en filas, por lo que cada hijo, hara parte de una fila
    y se encontraran una al lado de otra. FLEX-DIRECTION: COLUMN permite cambiar esto haciendo que cada elemento hijo se comporte como una COLUMNA de esta manera, cada hijo representara una COLUMNA

    HEIGHT: 250PX       Al aplicarle un alto al elemento PADRE, sus hijos, heredaran era altura, por lo tanto, cada columna tendra una altua maxima de 250px

    FLEX-WRAP: WRAP     Permitira que cada elemento hijo que tienen la propiedad de COLUMN se "Quiebren" y por ende, ira una seguida de la otra.
*/
.rodapePrincipal-navMap-list{
    display: flex;
    flex-direction: column;
    height: 260px;
    flex-wrap: wrap;
}
/*
    DISPLAY: FLEX           Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro horizontalmente

    FLEX-WRAP: WRAP         Para este caso, se sabe que por defecto, el comportamiento de los elementos se da en celdas, por lo que definimos un tamaño especifico de las celdas, para este caso, del 23%, una vez se llegue al 100%, se rompera dicha fila de celdas y se hara una nueva

*/
.contenidoPrincipal-cursos{
    display: flex;
    flex-wrap: wrap;
}
/*
    DISPLAY: FLEX           Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro horizontalmente

*/
.contenidoPrincipal-cursos-link{
    display: flex;
    width: 23%;
}
/*
    DISPLAY: FLEX           Permite que los elementos internos que actualmente se comportan como elementos TIPO BLOCK, pasen a ser FLEX, de esta manera, se encuentra un elemento seguido de otro horizontalmente

    JUSTIFY-CONTENT: SPACE-BETWEEN  Permite que los elementos que ya tienen una propiedad TIPO FLEX, pasen a ordenarse de determinada forma HORIZONTALMENTE

*/
.videoSobre .container{
    display: flex;
    justify-content: space-around;
}
/*
    CONFIGURACION DE VERSION MOVILE RESPONSIVE
*/
@media (max-width:768px){

    /*
        FLEX - DIRECTION: COLUMN     Permite que los elementos que ya son de tipo FLEX, pasen a comportarse como columna, de esta forma, no habra desbordamiento en la version movil

        ALIGN-ITEMS: INITIAL        Permite que la alineacion aplicada anteriormente (align-items:center) cambie. Dado que esa alineacion permitira centrar los elementos verticalmente, ahora, en este caso, se han alineado horizontalmente. Y dado que necesitamos que estos campos ocupen el 100% horizontalmente para la version movile, usamos la alineacion original por defecto que si usa el 100% de la pantalla horizontalmente

        TEXT-ALIGN: CENTER          Permite centrar el texto dentro del contenido

    */
    .headerPrincipal .container{
        flex-direction: column;
        align-items: initial;
        text-align: center;
    }
    /*
        FLEX - DIRECTION: COLUMN     Permite que los elementos que ya son de tipo FLEX, pasen a comportarse como columna, de esta forma, no habra desbordamiento en la version movil

    */
    .headerPrincipal-nav{
        flex-direction: column;
    }

    /*
        FLEX - DIRECTION: COLUMN     Permite que los elementos que ya son de tipo FLEX, pasen a comportarse como columna, de esta forma, no habra desbordamiento en la version movil. Esto se aplica al contenedor PADRE
    */
    .contenidoPrincipal-cursos{
        flex-direction: column;
    }
    /*
        WIDTH: 100%                 Permite aplicar un porcentaje mayor a cada elemento que ahora se comporta como columna. Dado que deseamos que abarque el 100% de la venta, hacemos que su width sea de 100%
    */
    .contenidoPrincipal-cursos-link{
        width: 100%;
    }
    /*
        HEIGHT: AUTO                Dado que para la version Desktop definimos un tamaño para las columnas, lo que ahora se desea es que su tamaño sea automatico y por ende, ya no funcionara el FLEX-WRAP, entonces, su comportamiento se basara enteramente por FLEX-DIRECTION: COLUMN
    */
    .rodapePrincipal-navMap-list{
        height: auto;
    }
    /*
        FLEX - DIRECTION: COLUMN     Permite que los elementos que ya son de tipo FLEX, pasen a comportarse como columna, de esta forma, no habra desbordamiento en la version movil. Esto se aplica al contenedor PADRE

        FLEX-WRAP: NOWRAP           Al ya tener la configuracion en columna, no necesitamos que dichas columnas vayan una seguida de la otra, por eso modificamos el comportamiento WRAP a NOWRAP
    */
    .videoSobre .container{
        flex-direction: column;
        flex-wrap: nowrap;
    }
    /*
        FLEX - DIRECTION: COLUMN     Permite que los elementos que ya son de tipo FLEX, pasen a comportarse como columna, de esta forma, no habra desbordamiento en la version movil. Esto se aplica al contenedor PADRE
    */
    .rodapePrincipal-patrocinadores .container{
        flex-direction: column;
    }
    /*
        ALIGN-ITEMS: INITIAL        Dado que nuestros dos contenedores (patrocinadores y formulario) ya no se encuentran en formato ROW sino en formato COLUMN, solo se necesita que los elementos PROPIOS del contenedor PATROCINADORES se encuentren centrados verticalmente entre si

        WIDTH: 100%                 Permite que al trabajar en columnas, el contenedor de los patrocinadores ocupe el 100% del ancho de la pantalla del dispositivo movil

        MARGIN: 0                   Elimina el margin que habia entre los contenedores cuando se comportaban en ROW
    */
    .rodapePrincipal-patrocinadores-list{
        align-items: center;
        width: 100%;
        margin: 0;
    }
    /*
        WIDTH: 100%                 Permite que el contenedor del formulario, ya no ocupe el 25% de la pantalla sino ahora, el 100%, se esta manera, se dentran los dos contenedores uno debajo del otro (contenedor patrocinadores y debajo, contenedor formulario)
    */
    .rodapePrincipal-contatoForm{
        width: 100%;
    }

    /*
        JUSTIFY-CONTENT: CENTER     Dado que el contenedor PADRE ocupa el 100% del ancho de la pantalla, para centrar a su HIJO, usamos la propiedad CENTER
    */
    .rodapePrincipal-contatoForm-fieldset{
        justify-content: center;
    }

}